{"name":"Synology switch","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_69"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Connection Status ","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Turn synology off","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button2","style":{"weight":"1.2"},"text":"Turn synology on","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label2","style":{"weight":"1.2"},"text":"WOL","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_69"}}},"uiCallbacks":[{"callback":"synOff","eventType":"onReleased","name":"button1"},{"callback":"synOn","eventType":"onReleased","name":"button2"}],"quickAppVariables":[{"name":"Ip Address","value":"10.0.0.99"},{"name":"Username","value":"admin"},{"name":"Password","value":"mysecret"},{"name":"Mac adress","value":"00:32:32:32:0a:0f"},{"name":"Port","value":"5000"},{"name":"Broadcast adres","value":"10.0.0.255"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- Device Controller is a little more advanced than other types. \n-- It can create child devices, so it can be used for handling multiple physical devices.\n-- E.g. when connecting to a hub, some cloud service or just when you want to represent a single physical device as multiple endpoints.\n-- \n-- Basic knowledge of object-oriented programming (oop) is required. \n-- Learn more about oop: https://en.wikipedia.org/wiki/Object-oriented_programming \n-- Learn more about managing child devices: https://manuals.fibaro.com/home-center-3-quick-apps/\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp:onInit\")\n    --self.udp = net.UDPSocket({ broadcast = true}) \n\n    -- Setup classes for child devices.\n    -- Here you can assign how child instances will be created.\n    -- If type is not defined, QuickAppChild will be used.\n    self:initChildDevices({\n        [\"com.fibaro.binarySwitch\"] = MyBinarySwitch,\n    })\n\n    -- Print all child devices.\n    self:debug(\"Child devices:\")\n    for id,device in pairs(self.childDevices) do\n        self:debug(\"[\", id, \"]\", device.name, \", type of: \", device.type)\n    end\nend\nfunction QuickApp:synOff()\n    local http = net.HTTPClient()\n\n     print(tostring(\"hello\"))\n     local getip = self:getVariable(\"Ip Address\")\n     print(tostring(getip))\n     local http = net.HTTPClient({timeout = 5000})  --  5 seconds\n  local data = nil\n \n  local url = \"http://\"..self:getVariable(\"Ip Address\")..\":\"..self:getVariable(\"Port\")..\"/webapi/auth.cgi?api=SYNO.API.Auth&version=3&method=login&account=\"..self:getVariable(\"Username\")..\"&passwd=\"..self:getVariable(\"Password\")..\"&format=cookie'\"\n  print(url)\n\n    local inputheaders = {\n    ['accept'] = 'application/json', \n    ['Content-Type'] = 'application/x-www-form-urlencoded'\n\n    }\n\n  http:request(url, {\n    options = {\n      method = \"GET\",\n     headers = inputheaders,\n     data = \"\"\n    },  \n     success = function(response)\n       self:debug(response.status)\n      -- stats = function(response)\n   --     print(success..yubiii)\n        self:debug(response.data)\n        bob = response.data\n        b = string.sub(bob, 17, 102)\n        c = string.sub(bob, 112, 197)\n        print(b)\n        print(c)\n        if response.status == 200  then\n            self:updateView(\"label1\", \"text\", \"Connected\")\n        end\n        \n            local url2 = \"http://\"..self:getVariable(\"Ip Address\")..\":\"..self:getVariable(\"Port\")..\"/webapi//entry.cgi?api=SYNO.Core.System&version=1&method=shutdown&_did=\"..tostring\n            (b)..\"&_sid=\"..tostring(c)\n            print(url2)\n           -- print(tostring(url2..\"/api=SYNO.Core.System&method=shutdown&version=1\"))\n            http:request(url2, {\n                options = {\n                    method = \"GET\",\n                    headers = {\n                    },\n\n                }\n               \n            })\n    end,  --  success\n    \n  })\nend\n\n\n--function QuickApp:receiveData()\n --   self.udp:receive({\n --   success = function(data)\n  --      print(data)\n  --      self:receiveData() -- will read next datagram\n  --  end,\n  --  error = function(error)\n   --     self:debug(\"Error:\", error)\n   -- end})\n--end \n \n\n\n\n\nfunction QuickApp:synOn()\n   --\n    --00:11:32:66:0a:0f\n    mac1 = string.char(0x00,0x11,0x32,0x66,0x0a,0x0f)--puthere you mac adress\n    for i=1,4 do\n        mac1 = mac1..mac1  \n    end\n\n    mac2 = string.char(0xff,0xff,0xff,0xff,0xff,0xff)..string.char(0xff,0xff,0xff,0xff,0xff,0xff)..string.char(0xff,0xff,0xff,0xff,0xff,0xff)..string.char(0xff,0xff,0xff,0xff,0xff,0xff)..string.char(0xff,0xff,0xff,0xff,0xff,0xff)..string.char(0xff,0xff,0xff,0xff,0xff,0xff)..mac1---Magic packet needs broadcast MAC in front to wake up\n    --ref https://www.esp8266.com/viewtopic.php?f=19&t=2981\n\n    self.udp = net.UDPSocket({ \n        broadcast = true,\n        timeout = 3000\n    })\n\n    self.udp:sendTo(mac2, self:getVariable(\"Broadcast adres\"), 9, {\n        success = function()\n        self:trace(\"OK send magic package\")\n         --   self:receiveData()\n        --    self.udp:close()\n            if success == success then\n                self:updateView(\"label2\", \"text\", \"Wake on Lan package send\")\n            end\n       -- self:receiveData()\n        end,\n        error = function(error)\n        print('Error:', error)\n        if error == error then\n            self:updateView(\"label2\", \"text\", \"Error\")\n        end\n    end\n    })\n    --   self.udp:close()\n\nend\n\nfunction QuickApp:createChild()\n    local child = self:createChildDevice({\n        name = \"child\",\n        type = \"com.fibaro.binarySwitch\",\n        }, MyBinarySwitch)\n\n    self:trace(\"Child device created: \", child.id)\nend\n\n-- Sample class for handling your binary switch logic. You can create as many classes as you need.\n-- Each device type you create should have its class which inherits from the QuickAppChild type.\nclass 'MyBinarySwitch' (QuickAppChild)\n\n-- __init is a constructor for this class. All new classes must have it.\nfunction MyBinarySwitch:__init(device)\n    -- You should not insert code before QuickAppChild.__init. \n    QuickAppChild.__init(self, device) \n\n    self:debug(\"MyBinarySwitch init\")   \nend\n\nfunction MyBinarySwitch:turnOn()\n    self:debug(\"child\", self.id, \"turned on\")\n    self:updateProperty(\"value\", true)\nend\n\nfunction MyBinarySwitch:turnOff()\n    self:debug(\"child\", self.id, \"turned off\")\n    self:updateProperty(\"value\", false)\nend\n"}]}